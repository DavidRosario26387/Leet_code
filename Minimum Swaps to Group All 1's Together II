# Java

class Solution {
    public int minSwaps(int[] nums) {
        int n=nums.length;
        int window_size=sum(nums);
        if(window_size==n || window_size==0){
            return 0;
        }
        int max_ones=0;
        for(int i=0;i<window_size;i++){
            if(nums[i]==1){
                max_ones+=1;
            }
        }
        int curr=max_ones;
        for(int i=1;i<n;i++){
            curr=curr-nums[i-1]+nums[(i+window_size-1)%n];
            max_ones=Math.max(max_ones,curr);
        }
        int swaps=window_size-max_ones;
        return swaps;
    }
    public static int sum(int[] arr){
        int sum=0;
        for(int i=0;i<arr.length;i++){
            sum+=arr[i];
        }
        return sum;
    }
}

# Python

class Solution:
    def minSwaps(self, nums: List[int]) -> int:
        window_size=sum(nums)
        n=len(nums)
        if window_size==n or window_size==0:
            return 0
        curr=sum(nums[i] for i in range(window_size))
        max_ones=curr
        for i in range(1,n):
            curr=curr-nums[i-1]+nums[(i+window_size-1)%n]
            max_ones=max(max_ones,curr)
        min_swaps=window_size-max_ones
        return min_swaps
