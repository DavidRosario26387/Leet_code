# Java

class Solution {
    public double maxProbability(int n, int[][] edges, double[] succProb, int start_node, int end_node) {
        double[] maxprob=new double[n];
        maxprob[start_node]=1;

        for(int i=0;i<n-1;i++){
            boolean updated=false;
            for(int j=0;j<edges.length;j++){
                int u=edges[j][0];
                int v=edges[j][1];
                double prob=succProb[j];

                if(maxprob[u]*prob>maxprob[v]){
                    maxprob[v]=maxprob[u]*prob;
                    updated=true;
                }
                if(maxprob[v]*prob>maxprob[u]){
                    maxprob[u]=maxprob[v]*prob;
                    updated=true;
                }
            }
            if(!updated) break;
        }
        return maxprob[end_node];
    }
}


# python

class Solution:
    def maxProbability(self, n: int, edges: List[List[int]], succProb: List[float], start_node: int, end_node: int) -> float:
        dist=[0]*n
        dist[start_node]=1

        for _ in range(n-1):
            updated=False
            for i,(u,v) in enumerate(edges):
                if dist[u]*succProb[i]>dist[v]:
                    dist[v]=dist[u]*succProb[i]
                    updated=True
                if dist[v]*succProb[i]>dist[u]:
                    dist[u]=dist[v]*succProb[i]
                    updated=True
            if not updated:
                break
        return dist[end_node]
        
