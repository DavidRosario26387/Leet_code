from collections import defaultdict
class Solution:
    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:
        rank=[1]*(len(edges)+1)
        par=[i for i in range(len(edges)+1)]
        def find(n):
            if par[n] != n:
                par[n] = find(par[n])  # Path compression
            return par[n]
        def union(n1,n2):
            p1,p2=find(n1),find(n2)
            if p1==p2:
                return False
            if rank[p1]>rank[p2]:
                par[p2]=p1
                rank[p1]+=rank[p2]
            else:
                par[p1]=p2
                rank[p2]+=rank[p1]
            return True
        
        for i,j in edges:
            if not union(i,j):
                return [i,j]
