# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def balanceBST(self, root: TreeNode) -> TreeNode:
        inorder=[]
        self.inorder_traversal(root,inorder)

        return self.create_balanced_BST(inorder,0,len(inorder)-1)

    def inorder_traversal(self,root,inorder):  #for populating the inorder list
        if not root:
            return
        self.inorder_traversal(root.left,inorder)
        inorder.append(root.val)
        self.inorder_traversal(root.right,inorder)
    def create_balanced_BST(self,inorder,start,end):   #for creating the balanced tree
        if start>end:
            return None
        mid=start+(end-start)//2

        left_subtree=self.create_balanced_BST(inorder,start,mid-1)
        right_subtree=self.create_balanced_BST(inorder,mid+1,end)

        node=TreeNode(inorder[mid],left_subtree,right_subtree)
        return node
